# GitLab CI Configuration File: .gitlab-ci.md
#
# Configura el pipeline para ejecutar jobs en diferentes etapas (stages) y definir variables.

# `stages`: Define las etapas en el pipeline. Se ejecutan en el orden definido.
stages:
  - .pre  # Etapa opcional previa (validaciones previas al build).
  - build  # Etapa de construcción: creación de artefactos o configuración.
  - test   # Etapa de pruebas: validación del código o funcionalidades.
  - deploy # Etapa de despliegue: despliegue en producción o staging.
  - .post  # Etapa opcional posterior (limpieza o notificaciones).

# Variables globales que estarán disponibles para todos los jobs.
variables:
  ENVIRONMENT: 'production'  # Definición del entorno global (se usa en todos los jobs).

########## job_build ##########
# `job_build`: Se ejecuta en la etapa `build` para realizar tareas de construcción.
job_build:
  script:
    - echo $ENVIRONMENT  # Muestra el valor de `ENVIRONMENT` (por defecto 'production').

########## job_test ##########
# `job_test`: Se ejecuta en la etapa `test` para realizar pruebas. Solo se ejecuta en la rama `develop`.
job_test:
  script:
    - echo $ENVIRONMENT  # Muestra el valor de `ENVIRONMENT`.
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'  # Ejecuta solo si la rama es `develop`.

########## job_deploy ##########
# `job_deploy`: Se ejecuta en la etapa `deploy`. Sobrescribe `ENVIRONMENT` a `staging` solo para este job.
job_deploy:
  variables:
    ENVIRONMENT: 'staging'  # Sobrescribe `ENVIRONMENT` a nivel de job (se establece como 'staging').
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'  # Ejecuta si la rama es `main` y no es un merge request.
