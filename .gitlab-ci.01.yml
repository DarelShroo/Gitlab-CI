# GitLab CI Configuration File: .gitlab-ci.yml
#
# Configura el pipeline para ejecutar jobs en diferentes etapas.
# Se incluyen configuraciones para variables, imágenes de contenedor, reglas y scripts de ejecución.

########## include ##########
# `include`: Permite incluir configuraciones desde archivos externos (remotos, de otro proyecto o locales).
include:
  - remote: 'https://example.com/.gitlab-ci.yml'  # Archivo desde una URL remota.
  - project: '/example/folder'
    ref: main
    file: '/example.yml'  # Archivo desde otro proyecto en GitLab.
  - local: 'file.yml'  # Archivo local dentro del mismo repositorio.

########## variables ##########
# `variables`: Define variables globales disponibles para todos los jobs.
variables:
  ENVIRONMENT: 'production'  # Variable global para definir el entorno (por defecto 'production').

########## stages ##########
# `stages`: Define las etapas del pipeline. Se ejecutan en el orden en que se definen.
stages:
  - test    # Etapa de pruebas.
  - build   # Etapa de construcción.
  - deploy  # Etapa de despliegue.

########## default ##########
# `default`: Valores por defecto aplicados a todos los jobs, a menos que se sobrescriban.
default:
  image: python:3.9  # Imagen Docker por defecto (Python 3.9).
  retry: 2          # Reintentos automáticos en caso de fallo (máximo 2 reintentos).

########## job_a ##########
# `job_a`: Se ejecuta en la etapa `test`, usa la imagen por defecto y hereda el comportamiento de `retry`.
job_a:
  stage: test  # Etapa en la que se ejecuta el job.
  variables:
    BRANCH: "develop"  # Variable específica para este job (solo ejecuta si el commit es en la rama 'develop').
  script:
    - echo 'hereda default usa Python 3.9 y retry 2'  # Mensaje informativo.
  rules:
    - if: '$CI_COMMIT_BRANCH == "$BRANCH"'  # Ejecuta solo si la rama es 'develop'.
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'  # Ejecuta solo si no es un evento de merge request.

########## job_b ##########
# `job_b`: Se ejecuta en la etapa `build`. Sobrescribe la imagen por defecto, usa Node.js 14.
job_b:
  stage: build  # Etapa en la que se ejecuta el job.
  image: node:14  # Imagen Docker específica (Node.js 14).
  script:
    - echo "usa Node.js 14 pero hereda retry 2"  # Mensaje informativo sobre la imagen y reintentos.
    - echo "Building in $ENVIRONMENT environment"  # Muestra el entorno de despliegue ('production').
